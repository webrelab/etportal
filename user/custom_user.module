<?php

include 'staff_popup_info.inc';
/**
 * Создаём сотрудника при добавлении пользователя hook_user_insert
 */

function custom_user_user_insert(&$edit, $account, $category) {
    if ($account->is_new) {
        global $user;
        $uw = entity_metadata_wrapper('user', $user);
        $node = entity_create('node', array(
            'type' => 'staff_member',
            'title' => $edit['name'],
            'uid' => $account->uid,));
        $nw = entity_metadata_wrapper('node', $node);
        $nw->field_user_link->set($edit['uid']);
        $nw->save();
    }
}

function custom_user_user_presave(&$edit, $account, $category) {
    if (empty($account->field_company_link)) {
        $edit['field_company_link']['und'][0]['target_id'] = '15558';
    }
}

/**
 * Разрешаю вывод формы добавления учётной записи в оверлей
 */

function custom_user_admin_paths_alter(&$paths) {
    $paths['company/user/create'] = TRUE;
}

/**
 * Функция возвращает массив ID отделов по uid пользователя
 */

function portal_get_departments_list($uid) {
    if ($uid == 0) {return false;}
    $uw = entity_metadata_wrapper('user', $uid);
    if (empty($uw->field_sm_link->value())) {return false;}
    if (empty($uw->field_sm_link->field_departments_link->raw())) {return false;}
    return $uw->field_sm_link->field_departments_link->raw();
}

function custom_user_menu_alter(&$items) {
    $items['user/%user']['access callback'] = 'portal_user_page_access';
    $items['user/%user/edit']['access callback'] = 'portal_user_page_access';
    $items['admin/people']['access callback'] = 'portal_admin_allusers_page_access';
    $items['admin/people']['access arguments'] = array(0 => 'manage portal users');
}

function portal_admin_allusers_page_access() {
    return user_access('manage portal users');
}

function portal_user_page_access($account) {
    global $user;
    $uw = entity_metadata_wrapper('user', $user->uid);
    $cuw = entity_metadata_wrapper('user', $account);
    return (($uw->field_company_link->raw() == $cuw->field_company_link->raw() && in_array('user_editor', $uw->value()->roles)) || in_array('administrator', $uw->value()->roles) || $user->uid == $account->uid);
}

function portal_add_user_page_access() {
    return (in_array('user_editor', $GLOBALS['user']->roles) || user_access('manage portal users')) && $GLOBALS['user']->uid > 0;
}

function custom_user_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
    if (!(user_access('administer users'))) {
        $form['picture']['#access'] = FALSE;
        $form['account']['status']['#access'] = ($GLOBALS['user']->uid != $form['#user']->uid);
    }
}

function custom_user_form_user_register_form_alter(&$form, &$form_state, $form_id) {
    $form['administer_users']['#value'] = false;
}

/**
 * Создаю страницу с формой регистрации пользователя для администраторов компаний
 */

function custom_user_permission() {
    return array(
        'manage portal users' => array(
            'title' => 'Manage portal users'
        )
    );
}

function custom_user_menu() {
    $items['company/user/create'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('custom_user_user_register_form'),
        'access arguments' => array('user_editor'),
        'title' => 'Добавление пользователя',
        'access callback' => 'portal_add_user_page_access'
        
    );
    return $items;
}

function custom_user_user_register_form($form, &$form_state) {
  global $user;
  $uw = entity_metadata_wrapper('user', $user->uid);

  $admin = in_array('user_editor', $user->roles);

  // Pass access information to the submit handler. Running an access check
  // inside the submit function interferes with form processing and breaks
  // hook_form_alter().
  $form ['administer_users'] = array(
    '#type' => 'value',
    '#value' => $admin,
  );

  // If we aren't admin but already logged on, go to the user page instead.
  if (!$admin && $user->uid) {
    drupal_goto('user/' . $user->uid);
  }

  $form ['#user'] = drupal_anonymous_user();
  $form ['#user_category'] = 'register';

  $form ['#attached']['library'][] = array('system', 'jquery.cookie');
  $form ['#attributes']['class'][] = 'user-info-from-cookie';

  // Start with the default user account fields.
  user_account_form($form, $form_state);

  // Attach field widgets, and hide the ones where the 'user_register_form'
  // setting is not on.
  $langcode = entity_language('user', $form ['#user']);
  field_attach_form('user', $form ['#user'], $form, $form_state, $langcode);
  foreach (field_info_instances('user', 'user') as $field_name => $instance) {
    if (empty($instance ['settings']['user_register_form'])) {
      $form [$field_name]['#access'] = FALSE;
    }
  }

  if ($admin) {
    // Redirect back to page which initiated the create request;
    // usually admin/people/create.
    $form_state ['redirect'] = $_GET ['q'];
  }

  $form ['actions'] = array('#type' => 'actions');
  unset($form['account']['roles']['#options'][3]);
  
  $form_state['entityreference_prepopulate']['user']['user']['field_company_link'][0] = $uw->field_company_link->raw();
  $form['account']['status']['#default_value'] = 1;
  $form ['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create new account'),
  );

  $form ['#validate'][] = 'user_register_validate';
  // Add the final user registration form submit handler.
  $form ['#submit'][] = 'user_register_submit';
  return $form;
}

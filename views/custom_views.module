<?php

/**
 * Реализация хука hook_views_pre_view() для встраивания скрипта управления отображением комментариев
 */

function custom_views_views_pre_view(&$view, &$display_id, &$args) {
    $displays = array('page_1');
    $views = array('tasks', 'control', 'wish_list');
    if (in_array($view->name, $views) && in_array($display_id, $displays)) {
        drupal_add_library('system', 'jquery.cookie');
        drupal_add_js(drupal_get_path('module', 'custom_views') . '/comment_switcher.js');
    }
    if ($view->name == 'authorizations') {
        if (!in_array('vendor_editor', $GLOBALS['user']->roles)) {
            unset($view->display['page']->handler->options['header']['area_text_custom']);  // Удаляю кнопку "Добавить вендора" для всех, кроме роли vendor_editor
        }
    }
    if ($view->name == 'websystems') {
        if (!in_array('websystem_editor', $GLOBALS['user']->roles)) {
            unset($view->display['page']->handler->options['header']['area_text_custom']);  // Удаляю кнопку "Добавить вендора" для всех, кроме роли websystem_editor
        }
    }
    if ($view->name == 'contragents') {
        if (!in_array('contragent_editor', $GLOBALS['user']->roles)) {
            unset($view->display['page_1']->handler->options['header']['area_text_custom']);  // Удаляю кнопку "Добавить вендора" для всех, кроме роли websystem_editor
        }
    }
    if ($view->name == 'instructions') {
        if (!in_array('instruction_editor', $GLOBALS['user']->roles) && !in_array('instruction_vendor_editor', $GLOBALS['user']->roles)) {
            unset($view->display['page']->handler->options['header']['area_text_custom']);  // Удаляю кнопку "Добавить вендора" для всех, кроме роли websystem_editor
        }
    }
    
    /**
     * Разделяю доступ к представлениям на основании включенных функций в компании
     */
}



/**
 * Реализация хука hook_views_api() для регистрации своего обработчика для вюьса
 */

function custom_views_views_api() {
    return array('api' => 3);
}

/**
 * Реализация хука hook_views_plugins() для создания плагина управления доступом
 */

function custom_views_views_plugins() {
    return array(
        'access' => array(
            'portal_view_access' => array(
                'title' => 'Доступ к функциям портала',
                'handler' => 'custom_views_plugin_access_portal_view_access',
                'uses options' => TRUE,
            )
        )
    );
}

function portal_check_module_access($modules, $rids) {
    if (user_is_logged_in()){
        global $user;
        $uw = entity_metadata_wrapper('user', $user);
        $cm = $uw->field_company_link;
        $roles = array_keys($user->roles);
        $roles[] = $user->uid ? DRUPAL_AUTHENTICATED_RID : DRUPAL_ANONYMOUS_RID;
        $usermod = array(
            'task' => $cm->field_company_module_tasks->value(),
            'control' => $cm->field_company_module_control->value(),
            'wish' => $cm->field_company_module_wish->value(),
            'instruction' => $cm->field_company_module_instruction->value(),
            'contragent' => $cm->field_company_module_contragents->value(),
            'sc' => $cm->field_company_module_sc->value(),
            'websystem' => $cm->field_company_module_websystem->value(),
        );
        $usermod = array_filter($usermod);
        $usermod = array_keys($usermod);
        $target = array_intersect($modules, $usermod);
        return user_access('access all views', $user) || (array_intersect($modules, $usermod) && array_intersect(array_filter($rids), $roles));
    }
    return false;
}

/**
 * Реализация хука hook_views_data() для регистрации своего фильтра
 */

function custom_views_views_data_alter(&$data) {
    $data['node']['authorfilter'] = array(
        'group' => t('Custom'),
        'title' => t('Author filter'),
        'help' => t('Author filter'),
        'filter' => array(
            'handler' => 'custom_views_handler_filter_authorfilter',
        ),
        'real field' => 'uid',
    );
}

function custom_views_views_data() {
    $data['custom_views']['table']['group'] = t('custom_views');
    $data['custom_views']['table']['join'] = array(
        // Exist in all views.
        '#global' => array(),
    );
    
    $data['custom_views']['current_url_field'] = array(
        'title' => t('Current url'),
        'help' => t('This field return current URL'),
        'field' => array(
        'handler' => 'views_handler_current_url_field',
        ),
    );
    return $data;
}

function custom_views_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
    $views_id = array('views-exposed-form-tasks-page-1', 'views-exposed-form-control-page-1', 'views-exposed-form-dialogs-references-dialog-3');
    if (in_array($form['#id'], $views_id)) {
        foreach ($form['field_appointed_link_target_id']['#options'] as $key=>$value) {
            if ($key != 'All') {
                $nw = entity_metadata_wrapper('node', $key);
                if ($nw->field_user_link->raw() > 1) {
                    $name = portal_get_user_name($nw->field_user_link->raw());
                    $dep = portal_get_depname($nw->field_user_link->raw());
                    unset($form['field_appointed_link_target_id']['#options'][$key]);
                    $form['field_appointed_link_target_id']['#options'][$dep][$key] = $name;
                } else {
                    unset($form['field_appointed_link_target_id']['#options'][$key]); // Удаляю учётку админа из списка ответственных
                }
            }
        }
    //execute manage_custom_filters function submit in first step on $form['#submit'] array
    array_unshift($form['#submit'], 'manage_custom_filters');
    }
    
    /**
     * Подключаю виджет быстрого фильтра
     */
    if (in_array($form['#id'], array('views-exposed-form-vendors-page-1', 'views-exposed-form-instructions-category-page', 'views-exposed-form-dialogs-references-dialog-1', 'views-exposed-form-vendors-entityreference-view-widget-1'))) {
        $form['#attached']['js'][] = array(
            'data' => drupal_get_path('module', 'custom_views') . '/fast_filter.js',
            'type' => 'file',
            'weight' => 11
        );
        $form['#attached']['js'][] = array(
            'data' => array('viewid' => $form['#id']),
            'type' => 'setting'
        );
    }
}

function custom_views_form_alter(&$form, &$form_state, $form_id) {
    if ($form['#id'] == 'views-exposed-form-general-search-page') {
        unset($form['#info']['filter-search_api_views_fulltext']['label']);
        $form['submit']['#class']= 'fi-magnifying-glass';
        $form['submit']['#before'] = '<br>';
    }
}

function manage_custom_filters($form, &$form_state) {
  //modify form_state values of concerned field

  //modify form_state of concerned field to pass to the view
//   $form_state['view']->display_handler->handlers['filter']['field_community_value']->validated_exposed_input = 'custom_value';
    foreach ($form_state['view']->display_handler->handlers['filter']['field_appointed_link_target_id']->value_options as $key=>$item) {
        $nw = entity_metadata_wrapper('node', $key);
        $name = portal_get_user_name($nw->field_user_link->raw());
        $form_state['view']->display_handler->handlers['filter']['field_appointed_link_target_id']->value_options[$key] = $name;
    }
}

/**
 * Добавляю регионы для фильтров Views
 */

function custom_views_vefl_layouts() {
    return array(
        'portal_layout' => array(
            'title' => 'Portal Layout',
            'regions' => array(
                'main' => 'Main',
                'second' => 'Additional (collapsed)',
                'bottom' => 'Bottom'
            )
        ),
    );
}

/**
 * Добавляю действия для VBO
 */

function custom_views_action_info() {
    return array(
        'custom_views_clone_examples' => array(
            'type' => 'node',
            'label' => 'Создание копий сущностей из примеров',
            'behavior' => array(),
            'configurable' => FALSE,
            'vbo_configurable' => FALSE,
            'triggers' => array('any'),
        ),
        'custom_views_control_close' => array(
            'type' => 'node',
            'label' => 'Перевести статус контроля в Закрыто',
            'behavior' => array(),
            'configurable' => FALSE,
            'vbo_configurable' => FALSE,
            'triggers' => array('any'),
        ),
        'custom_views_print_tables' => array(
            'type' => 'node',
            'label' => 'Распечатать таблицу',
            'behavior' => array(),
            'configurable' => FALSE,
            'vbo_configurable' => FALSE,
            'triggers' => array('any'),
            'aggregate' => TRUE // Эта опция отправит в обработчик не по одной ноде, а массив всех нод
        ),
        'custom_views_change_ids' => array(
            'type' => 'node',
            'label' => 'Обновление идентификаторов и счётчиков',
            'behavior' => array(),
            'configurable' => FALSE,
            'vbo_configurable' => FALSE,
            'triggers' => array('any'),
        )
    );
}

function custom_views_clone_examples(&$node, $context) {
    $new = replicate_clone_entity('node', $node);
    $new->field_forexample['und'][0]['value'] = 0;
    $new->uid = ($GLOBALS['user']->uid);
    unset($new->field_forexample_for_comp['und']);
    unset($new->field_node_id['und']);
    $uw = entity_metadata_wrapper('user', $GLOBALS['user']->uid);
    $comp = $uw->field_company_link->raw();
    if ($node->type == 'works_instructions') {
        unset($new->field_departments_link['und']);
        unset($new->field_vendor_links['und']);
        if (isset($node->field_instructions_categories['und'])) {
            unset($new->field_instructions_categories['und']);
            foreach ($node->field_instructions_categories['und'] as $cat) {
                $catw = entity_metadata_wrapper('node', $cat['target_id']);
                $name = $catw->label();
                $query = new EntityFieldQuery();
                $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'instructions_categories')
                    ->propertyCondition('status', NODE_PUBLISHED)
                    ->propertyCondition('title', $name, '=');
                $result = $query->execute();
                $catid = '';
                $exid = '';
                if ($result['node']) {
                    foreach ($result['node'] as $id => $data) {
                        $rw = entity_metadata_wrapper('node', $id);
                        if ($rw->author->field_company_link->raw() == $comp) $catid = $id;
                        if (isset($rw->getPropertyInfo()['field_forexample']) && $rw->field_forexample->value()) $exid = $id;
                    }
                    if (!$catid) {
                        $newcat = entity_create('node', array('type' => 'instructions_categories'));
                        $newcatw = entity_metadata_wrapper('node', $newcat);
                        $newcatw->title->set($name);
                        $newcatw->author->set($GLOBALS['user']->uid);
                        $newcatw->save();
                        $catid = $newcatw->getIdentifier();
                        if ($exid) {
                            $exid_node = node_load($exid);
                            $exid_node->field_forexample_for_comp['und'][] = array('target_id' => $comp);
                            node_save($exid_node);
                        }
                    }
                    $new->field_instructions_categories['und'][] = array('target_id' => $catid);
                }
            }
        }
        $query = new EntityFieldQuery;
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'departments')
            ->propertyCondition('status', NODE_PUBLISHED)
            ->fieldOrderBy('field_weight', 'value', 'ASC')
            ->range(0, 1);
        $result = $query->execute();
        if ($result['node']) {
            foreach ($result['node'] as $id => $data) {
                $new->field_departments_link['und'][0]['target_id'] = $id;
            }
        }
    }
    $node->field_forexample_for_comp['und'][] = array('target_id' => $comp);
    node_save($new);
    node_save($node);
}

function custom_views_control_close(&$node, $context) {
    $node->field_control_close['und'][0]['value'] = 1;
    $flag = flag_get_flag('control_close');
    $flag->flag('flag', $node->nid);
}

function custom_views_print_tables(&$items, $context) {
    foreach($items as $key=>$item) {
        $list[] = $key;
    }
    drupal_goto('/table-print/' . implode('+', $list));
}

function custom_views_change_ids(&$node, $context) {
    if ($node->type == 'company') {
        if (empty($node->field_company_prefix)) {
            dsm($node->type);
            $node->field_company_prefix['und'][0]['value'] = portal_prefix_generator();
        }
        if (empty($node->field_company_counter)) {
            $node->field_company_counter['und'][0]['value'] = 0;
        }
    }
    if (isset($node->field_node_id) && empty($node->field_node_id)) {
        $nw = entity_metadata_wrapper('node', $node);
        $uw = $nw->author;
        $count = $uw->field_company_link->field_company_counter->value();
        $count += 1;
        $prefix = $uw->field_company_link->field_company_prefix->value();
        $id = $prefix . $count;
        $uw->field_company_link->field_company_counter->set($count);
        $uw->field_company_link->save();
        $node->field_node_id['und'][0]['value'] = $id;
    }
}

/**
 * Настройка препроцессора для организации кеширования данных в представлениях с аккордеоном
 */

function custom_views_preprocess_views_view_accordion(&$variables) {
  views_row_cache_views_style_plugin_preprocess($variables);
}
